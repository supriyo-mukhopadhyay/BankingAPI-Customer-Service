package com.service.layer;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.net.URI;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;

import javax.management.RuntimeErrorException;
import javax.net.ssl.HttpsURLConnection;
import javax.ws.rs.client.Client;
import javax.ws.rs.client.ClientBuilder;
import javax.ws.rs.client.WebTarget;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.UriBuilder;

import org.glassfish.jersey.client.ClientConfig;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.dao.layer.BankingDAOLayer;
import com.exception.InvalidAuthException;
import com.exception.InvalidUserException;

@Service
public class ServiceLayer {

	BankingDAOLayer dao;
	private Client client;
	private WebTarget target;

	@Autowired
	public void setDao(BankingDAOLayer dao) {
		this.dao = dao;
	}

	public void auth(String uid, String pwd) throws InvalidUserException, InvalidAuthException {

		String password = dao.getPassword(uid);

		if (password == null)
			throw new InvalidUserException("wrng uid");

		if (!password.equals(pwd))
			throw new InvalidAuthException("wrng pwd");
	}

	public void setUserBankDetails(int empid, int ifsc) throws Exception {
		
		List<Object> list = new ArrayList<Object>();
		
		ClientConfig clientConfig = new ClientConfig();
		client = ClientBuilder.newClient(clientConfig);
		target = client.target(getBaseURI());
		
		target.path("details").request().accept(MediaType.APPLICATION_JSON).get(String.class);
		
		
		
	
//		String name = dao.getName(empid);
//		int accountNo = dao.getAccount(empid);
//		int balance = dao.getBalance(empid);
//		list.add(name);
//		list.add(accountNo);
//		list.add(balance);

		//return list;
	}

	public String bankDetails(int ifsc) {
		return dao.getBankName(ifsc);
	}

	public void userRegistration(int ifsc, int balance, int uid) {
		String userName = dao.getUserName(uid);
		String bankName = dao.getBankName(ifsc);
		dao.registerUser(bankName, balance, uid, userName);
	}

	public String getUserName(int empid) {
		return dao.getUserName(empid);
	}

	public void updateAccountDetails(int empid, int balance) {
		dao.updateDetails(empid, balance);
	}
	
	public URI getBaseURI()
	{
		return UriBuilder.fromUri("http://localhost:3030/Banking/rest/userService").build();
	}
}
